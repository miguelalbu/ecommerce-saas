// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELOS DA APLICAÇÃO

model Usuario {
  id        String   @id @default(uuid())
  nome      String
  email     String   @unique
  senhaHash String   @map("senha_hash")
  funcao    String   @default("ADMIN")
  ativo     Boolean  @default(true)
  criadoEm  DateTime @default(now()) @map("criado_em")

  @@map("usuarios")
}

model Categoria {
  id       String    @id @default(uuid())
  nome     String    @unique
  produtos Produto[]

  @@map("categorias")
}

model Produto {
  id          String    @id @default(uuid())
  nome        String
  descricao   String?
  preco       Decimal   @db.Decimal(10, 2)
  estoque     Int       @default(0)
  ativo       Boolean   @default(true)
  imageUrl    String?   @map("image_url")
  criadoEm    DateTime  @default(now()) @map("criado_em")

  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId String    @map("categoria_id")

  itens       ItemPedido[] // Relação com os itens do pedido

  @@map("produtos")
}

model Cliente {
  id               String    @id @default(uuid())
  nome             String
  sobrenome        String?
  email            String    @unique
  cpf              String?   @unique
  telefone         String?
  dataNascimento   DateTime? @map("data_nascimento")
  genero           String?
  senhaHash        String    @map("senha_hash")
  criadoEm         DateTime  @default(now()) @map("criado_em")
  pedidos          Pedido[]
  enderecos        Endereco[]

  @@map("clientes")
}

model Endereco {
  id          String  @id @default(uuid())
  rua         String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  cep         String

  cliente     Cliente @relation(fields: [clienteId], references: [id])
  clienteId   String  @map("cliente_id")

  @@map("enderecos")
}

model Pedido {
  id             String       @id @default(uuid())
  valor_total    Decimal      @db.Decimal(10, 2)
  status         String       @default("PROCESSANDO")
  criadoEm       DateTime     @default(now()) @map("criado_em")
  cliente_nome   String?
  codigoRastreio String?      @map("codigo_rastreio")

  cliente        Cliente      @relation(fields: [clienteId], references: [id])
  clienteId      String       @map("cliente_id")

  itens          ItemPedido[] // Relação com os itens do pedido

  @@map("pedidos")
}

// MODELO QUE ESTAVA FALTANDO
model ItemPedido {
  id                      String   @id @default(uuid())
  quantidade              Int
  precoNoMomentoDaCompra  Decimal  @map("preco_no_momento_da_compra") @db.Decimal(10, 2)

  pedido                  Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId                String   @map("pedido_id")

  produto                 Produto  @relation(fields: [produtoId], references: [id])
  produtoId               String   @map("produto_id")

  @@map("itens_pedido")
}